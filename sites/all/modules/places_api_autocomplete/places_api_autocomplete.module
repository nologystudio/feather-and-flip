<?php
require_once('sites/all/libraries/google_places_php/googlePlaces.php');
/**
 * @file
 * Google Places API autocomplete module.
 */

/**
 * Implements hook_menu().
 */
function places_api_autocomplete_menu() {
  $items['places/autocomplete'] = array(
    'title' => 'Places autocomplete',
    'page callback' => 'places_api_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['places/autocomplete/%/%/%'] = array(
    'title' => 'Places autocomplete',
    'page callback' => 'places_api_autocomplete',
    'page arguments' => array(2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/services/places'] = array(
    'title' => 'Google Places API',
    'description' => 'Configure Google Places API settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('places_api_autocomplete_admin_settings'),
    'file' => 'places_api_autocomplete.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Returns autocomplete suggestions.
 *
 * Returns autocomplete suggestions based on a given field, entity type, bundle
 * and string or just use the globally defined values for places api parameters.
 *
 * @param string $field_name
 *   The field name.
 * @param string $entity_type
 *   The entity type.
 * @param string $bundle
 *   The bundle.
 * @param string $string
 *   The string for the search.
 */
function places_api_autocomplete($field_name = 'global', $entity_type = NULL, $bundle = NULL, $string = '') {
  $matches = array();
  if ($string) {
    // Get the Google API key.
    $key = variable_get('places_api_autocomplete_key', NULL);

    // Build a new cache object, this allows us to cache queries locally.
    $cache_object = new PlacesApiAutocompleteCacheDrupal();

    // If this is not a field, but instead used in a global context, use the
    // global options.
    if ($field_name == 'global') {
      $options = variable_get('places_api_autocomplete_options', places_api_autocomplete_get_default_options());
    }
    else {
      // We grab parameter options from the field instance settings.
      $instance = field_info_instance($entity_type, $field_name, $bundle);
      $options = $instance['widget']['settings']['places_api_autocomplete_options'];
    }

    // Instantiate the autocomplete object.
    $places_api = new PlacesApiAutocomplete($key, $cache_object, $options);

    // Perform the actual search.
    $result = $places_api->search($string);

    // Map the results in the format drupal autocomplete API needs it.
    foreach ($result as $place) {
        $matches[$place->description.', '.$place->place_id] = check_plain($place->description.', '.$place->place_id);
    }
  }

  // Return the matches in json format, and stop the page execution.
  drupal_json_output($matches);
}

/**
 * Implements hook_field_widget_info().
 */
function places_api_autocomplete_field_widget_info() {
  return array(
    'places_api_autocomplete' => array(
      'label' => 'Google Places Autocomplete',
      'description' => 'A text field with Google Places API Autocomplete',
      'field types' => array('text'),
      'settings' => array(
        'size' => 60,
        'offset' => '',
        'location' => '',
        'radius' => '',
        'language' => '',
        'type' => '',
        'components' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function places_api_autocomplete_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'places_api_autocomplete') {
    $form['size'] = array(
      '#type' => 'textfield',
      '#title' => t('Size of textfield'),
      '#default_value' => $settings['size'],
      '#required' => TRUE,
      '#element_validate' => array('element_validate_integer_positive'),
    );

    $documentation_link = 'https://developers.google.com/places/documentation/autocomplete#place_autocomplete_requests';
    $options = variable_get('places_api_autocomplete_options', places_api_autocomplete_get_default_options());

    $form['places_api_autocomplete_options'] = array(
      '#type' => 'fieldset',
      '#title' => t('Places API parameters'),
      '#tree' => TRUE,
      '#description' => t('Documentation about the parameters, can be found <a target="_blank" href="@url">here</a>.', array('@url' => $documentation_link)),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $form['places_api_autocomplete_options']['offset'] = array(
      '#type' => 'textfield',
      '#title' => t('Offset'),
      '#default_value' => isset($settings['places_api_autocomplete_options']['offset']) ? $settings['places_api_autocomplete_options']['offset'] : $options['offset'],
    );
    $form['places_api_autocomplete_options']['location'] = array(
      '#type' => 'textfield',
      '#title' => t('Location'),
      '#default_value' => isset($settings['places_api_autocomplete_options']['location']) ? $settings['places_api_autocomplete_options']['location'] : $options['location'],
    );
    $form['places_api_autocomplete_options']['radius'] = array(
      '#type' => 'textfield',
      '#title' => t('Radius'),
      '#default_value' => isset($settings['places_api_autocomplete_options']['radius']) ? $settings['places_api_autocomplete_options']['radius'] : $options['radius'],
    );
    $form['places_api_autocomplete_options']['language'] = array(
      '#type' => 'textfield',
      '#title' => t('Language'),
      '#default_value' => isset($settings['places_api_autocomplete_options']['language']) ? $settings['places_api_autocomplete_options']['language'] : $options['language'],
    );
    $form['places_api_autocomplete_options']['types'] = array(
      '#type' => 'textfield',
      '#title' => t('Types'),
      '#default_value' => isset($settings['places_api_autocomplete_options']['types']) ? $settings['places_api_autocomplete_options']['types'] : $options['types'],
    );
    $form['places_api_autocomplete_options']['components'] = array(
      '#type' => 'textfield',
      '#title' => t('Components'),
      '#default_value' => isset($settings['places_api_autocomplete_options']['components']) ? $settings['places_api_autocomplete_options']['components'] : $options['components'],
    );
  }

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function places_api_autocomplete_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['value'] = array(
    '#type' => 'textfield',
    '#title' => $instance['label'],
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
    '#size' => $instance['widget']['settings']['size'],
    '#maxlength' => $field['settings']['max_length'],
    '#attributes' => array('class' => array('text-full')),
    '#autocomplete_path' => 'places/autocomplete/' . $instance['field_name'] . '/' . $instance['entity_type'] . '/' . $instance['bundle'],
    '#ajax' => array(
        'callback' => 'after_places_select',
        'wrapper' => 'gplaces-div'),
  );

  return $element;
}

function after_places_select($form, &$form_state) {
    $gp_result = $form_state['values']['field_google_place_id']['und'][0]['value'];
    if (empty($gp_result)){
        return '<div id="gplaces-div"></div>';
    }
    else {
        $api_key = variable_get('places_api_autocomplete_key', NULL);
        $values = explode(', ', $gp_result);
        $place_id = end($values);

        $googlePlaces = isset($googlePlaces) ? $googlePlaces : new googlePlaces($api_key);
        $googlePlaces->setPlaceId($place_id);
        $details = $googlePlaces->details();
        if (!empty($details['errors'])) {
            foreach($details['errors'] as $error) { watchdog('gp', $error); }
            return '<div id="gplaces-div"></div>';
        }
        $components_to_save = array(
            'address_components',
            'geometry',
            'icon',
            'international_phone_number',
            'name',
            'types',
            'url',
            'website',
            'price_level',
            'photos'
        );
        if (!isset($details) || !isset($details['result']) || empty($details['result'])) { return '<div id="gplaces-div"></div>'; }
        foreach($details['result'] as $component => $value) {
            if (!in_array($component, $components_to_save)) {
                unset($details['result'][$component]);
            }
        }
        $place = $details['result'];
        //watchdog('gp', 'Loaded place from Google: ' . $place['name']);

        // geofield
        if (isset($place['geometry'])) {
            $lat = $place['geometry']['location']['lat'];
            $lon = $place['geometry']['location']['lng'];
        }

        // addressfield
        if (isset($place['address_components'])) {
            // Locate the country code.
            $country_code = null;
            foreach ($place['address_components'] as $component) {
                foreach ($component['types'] as $type) {
                    if ($type == 'country') {
                        $country_code = $component['short_name'];
                        break;
                    }
                }
            }
            $country = '';
            $thoroughfare = '';
            $premise = '';
            $locality = '';
            $administrative_area = '';
            $postal_code = '';
            foreach ($place['address_components'] as $component) {
                foreach ($component['types'] as $type) {
                    switch ($type) {
                        case 'street_number':
                            if (!empty($thoroughfare)) {
                                $thoroughfare = $component['long_name'] . ' ' . $thoroughfare;
                            }
                            else { $thoroughfare = $component['long_name']; }
                            break;
                        case 'route':
                            if (!empty($thoroughfare)) {
                                switch ($country_code) {
                                    case 'AT': // Austria
                                    case 'DE': // Germany
                                        $thoroughfare = $component['long_name'] . ' ' . $thoroughfare;
                                        break;
                                    default:
                                        $thoroughfare .= ' ' . $component['long_name'];
                                        break;
                                }
                            }
                            else { $thoroughfare = $component['long_name']; }
                            break;
                        case 'locality':
                            $locality = $component['long_name'];
                            break;
                        case 'administrative_area_level_1':
                            $administrative_area = $component['short_name'];
                            break;
                        case 'country':
                            $country = $component['short_name'];
                            break;
                        case 'postal_code':
                            $postal_code = $component['long_name'];
                            break;
                    }
                }
            }
            $address = array(
                'country' => $country,
                'thoroughfare' => $thoroughfare,
                'premise' => $premise,
                'locality' => $locality,
                'administrative_area' => $administrative_area,
                'postal_code' => $postal_code
            );
        }

        // telephone
        $telephone = '';
        if (isset($place['international_phone_number'])) {
            $telephone = $place['international_phone_number'];
        }

        // website
        $website = '';
        if (isset($place['website'])) {
            $website = $place['website'];
        }

        // url (google plus)
        $gplus_url = '';
        if (isset($place['url'])) {
            $gplus_url = $place['url'];
        }

        // icon
        $icon = '';
        if (isset($place['icon'])) {
            $icon = $place['icon'];
        }

        // types
        $categories = array();
        if (isset($place['types'])) {
            foreach ($place['types'] as $delta => $type) {
                $categories[] = $type;
            }
        }

        // price level
        $price_level = '';
        if (isset($place['price_level'])) {
            $price_level = $place['price_level'];
        }

        // photo(s)
        $photos = array();
        if (isset($place['photos'])) {
            $photo_count = sizeof($place['photos']);
            for ($i = 0; $i < $photo_count; $i++) {
                $photos[] = $place['photos'][$i]['photo_reference'];
            }
        }

        $out = '<b>Latitude:</b> '.$lat.'<b style="margin-left:4em;">Longitude:</b> '.$lon.'<br /><br />';
        $out .= '<b>Address:</b><br />';
        $out .= '<i>Country:</i> '.$address['country'].'<i style="margin-left:4em;">Thoroughfare: </i> '.$address['thoroughfare'].'</br>';
        $out .= '<i>Premise:</i> '.$address['premise'].'<i style="margin-left:4em;">Locality: </i> '.$address['locality'].'</br>';
        $out .= '<i>Administrative area:</i> '.$address['administrative_area'].'<i style="margin-left:4em;">Postal code: </i> '.$address['postal_code'].'</br></br>';
        $out .= '<b>Telephone:</b> '.$telephone.'<br /><br />';
        $out .= '<b>Website:</b> '.$website.'<b style="margin-left:4em;">Google+:</b> '.$gplus_url.'<br />';
        $out .= '<b>GooglePlaces icon:</b> '.$icon.'<br /><br />';
        $out .= '<b>Categories:</b> '.implode(', ', $categories).'<br />';
        $out .= '<b>Price level:</b> '.$price_level.'<br /><br />';
        $out .= '<b>Photo references:</b><br />';
        foreach ($photos as $pref) {
            $out .= '<img src="'.$googlePlaces->photo($pref).'&maxheight=200" style="max-width:200px;max-height:200px;width: auto;height: auto;" />';
        }


        return '<div id="gplaces-div"><hr style="margin: 7px;">'.$out.'<br /><hr style="margin: 7px;"></div>';
    }
}

/**
 * Return default options
 */
function places_api_autocomplete_get_default_options() {
  return array(
    'offset' => '',
    'location' => '',
    'radius' => '',
    'language' => '',
    'types' => '',
    'components' => '',
  );
}

/**
 * Implements hook_flush_caches().
 */
function places_api_autocomplete_flush_caches() {
  return array('cache_places');
}
