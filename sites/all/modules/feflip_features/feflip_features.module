<?php

/**
 * Implements hook_init().
 * CORS configuration for serving resources to extenal calls
 */
function feflip_features_init() {
	$method = $_SERVER['REQUEST_METHOD'];
	if (isset($_SERVER['HTTP_ORIGIN'])) {
		drupal_add_http_header('Access-Control-Allow-Origin', $_SERVER['HTTP_ORIGIN']);
	}
	if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS'])) {
		drupal_add_http_header('Access-Control-Allow-Headers', $_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']);
	}
	if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD'])) {
		drupal_add_http_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
	}
	if ($method == 'OPTIONS') {
		exit;
	}
}

/**
 * Implements hook_admin_paths_alter().
 */
// function feflip_features_admin_paths_alter(&$paths) {
//   $paths['user'] = TRUE;
//   $paths['user/*'] = TRUE;
// }

/**
 * Implements hook_search_api_autocomplete_types().
 */
function feflip_features_search_api_autocomplete_types() {
  $types['feflip_features'] = array(
    'name' => t('feflip_features searches'),
    'description' => t('Searches provided by the <em>Feather+Flip Features</em> module.'),
    'list searches' => 'feflip_features_list_autocomplete_searches',
    'create query' => 'feflip_features_create_autocomplete_query',
    // OPTIONAL – only if you want additional search-specific options, like for Views:
    //'config form' => 'MODULE_autocomplete_config_form',
  );
  return $types;
}

function feflip_features_list_autocomplete_searches(SearchApiIndex $index) {
  $ret = array();
  // If your module only provides one search, it's simple:
  $ret['feflip_features']['name'] = t('feflip_features search');
  // Otherwise, loop over all defined searches:
  // foreach (… as $search) {
  //   // Remember to use a proper prefix to avoid conflicts.
  //   $id = 'feflip_features_' . $search->id;
  //   $ret[$id]['name'] = $search->label;
  //   // If the searches have additional options/information:
  //   $ret[$id]['options']['custom'] = $search->options;
  //}
  return $ret;
}

function feflip_features_create_autocomplete_query(SearchApiAutocompleteSearch $search, $complete, $incomplete) {
  $query = search_api_query($search->index_id);
  if ($complete) {
    $query->keys($complete);
  }
  if (!empty($search->options['custom']['extra'])) {
    list($f, $v) = explode('=', $search->options['custom']['extra'], 2);
    $query->condition($f, $v);
  }
  if (!empty($search->options['custom']['user_filters'])) {
    foreach (explode("\n", $search->options['custom']['user_filters']) as $line) {
      list($f, $v) = explode('=', $line, 2);
      $query->condition($f, $v);
    }
  }
  return $query;
}

function feflip_features_search_form(array $form, array &$form_state) {
  // …
  $form['keys'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter destination or hotel'),
  );
  // If there's only one search in your module, with ID "MODULE".
  // Otherwise, get the proper ID, as assigned in MODULE_list_autocomplete_searches(),
  // for the current search.
  $autocomplete_id = 'feflip_features';
  $search = search_api_autocomplete_search_load($autocomplete_id);
  if ($search && $search->enabled) {
    $search->alterElement($form['keys']);
  }

  return $form;
}
/**
 * Implements hook_cron().
 */
function feflip_features_cron() {
	// Rss import task
	Helpers::ImportExternalRss();
}

/*
*   Save a new booking
*/
function feflip_features_StoreBooking($args)
{
    global $user;
    $entityform = entity_create('entityform', array(
    'type' => 'booking',
    'created' => time(),
    'changed' => time(),
    'language' => LANGUAGE_NONE,
    'uid' => $user->uid));

    $wrapper = entity_metadata_wrapper('entityform', $entityform);

    //Fill fields
    $wrapper->field_first_name      = $args['user_first_name'];
    $wrapper->field_last_name       = $args['user_last_name'];
    $wrapper->field_email           = $args['user_email'];
    $wrapper->field_phone_number    = $args['user_phoneNumber'];
    $wrapper->field_credit_card     = $args['user_creditCard'];
    $wrapper->field_room_type       = $args['booking_roomType'];
    $wrapper->field_check_in        = $args['booking_ckeckIn'];
    $wrapper->field_check_out       = $args['booking_checkOut'];
    $wrapper->field_nights          = $args['booking_nights'];
    $wrapper->field_rooms           = $args['booking_rooms'];
    $wrapper->field_adults          = $args['booking_adults'];
    $wrapper->field_children        = $args['booking_children'];
    $wrapper->field_user_id         = $user->uid;
    $wrapper->field_booking_id      = $args['booking_id'];
    $wrapper->field_hotel_name      = $args['booking_hotelName'];
    $wrapper->field_hotel_contact   = $args['booking_hotelContact'];
    $wrapper->field_rate            = $args['booking_rate'];

    //Done!
    $wrapper->save();
    rules_invoke_event('entityform_submission', $entityform);
}